// Node.js File System Module - Built-in Module - COMES WITH NODE.JS
// The Node.js file system module allows you to work with the file system on your computer.
// https://www.w3schools.com/nodejs/nodejs_filesystem.asp
const fs = require('fs');

// Node.js Path Module - Built-in Module
// The Path module provides a way of working with directories and file paths.
// https://www.w3schools.com/nodejs/ref_path.asp
const path = require('path');

const webpack = require('webpack');

// See explanation.js
const flexbugs = require('postcss-flexbugs-fixes');

// See explanation.js
const autoprefixer = require('autoprefixer');

// See explanation.js
const cssnano = require('cssnano');

// See explanation.js
const ExtractTextPlugin = require('extract-text-webpack-plugin');

// See explanation.js
const HtmlWebpackPlugin = require('html-webpack-plugin');

const isDebug = process.env.NODE_ENV !== 'production';

const createApiBaseUrl = (isTest = false) => {
    const urls = {
        dev: 'http://localhost:64360',
        test: 'http://toFigure.out',
        production: 'http://toFigure.out'
    };

    if (isTest) return urls.test;
    return !isDebug ? urls.production : urls.dev;
};

const createAuthBaseUrl = (isTest = false) => {
    const urls = {
        dev: 'http://localhost:57946',
        test: 'http://auth.isatis.ba',
        production: 'http://auth.isatis.ba'
    };

    if (isTest) return urls.test;
    return !isDebug ? urls.production : urls.dev;
};

function configureCssLoader() {
    /* Uses following packages:
    - sass-loader
    - node-sass
    - css-loader
    - style-loader
    - postcss-loader
    - autoprefixer
    - cssnano
    -
    */

    // console.log(isDebug);
    // console.log(...isDebug);
    const base = [
        ...isDebug ? [{ loader: 'style-loader' }] : [],
        {
            loader: 'css-loader',
            options: {
                url: true,
                importLoaders: 1
            }
        },
        {
            loader: 'postcss-loader',
            options: {
                ident: 'postcss',
                plugins: () => (isDebug
                    ? [flexbugs, autoprefixer()]
                    : [flexbugs, autoprefixer(), cssnano({ preset: 'default' })]
                )
            }
        },
        {
            loader: 'sass-loader',
            options: { precision: 9 }
        }
    ];

    return !isDebug
        ? ExtractTextPlugin.extract({ use: base, fallback: 'style-loader' })
        : base;
}

module.exports = (options) => (env) => ({
    entry: options.entry,
    output: Object.assign({
        path: path.resolve(process.cwd(), 'build'),
        publicPath: '/'
    }, options.output),

    module: {
        rules: [
            {
                test: /\.js$/,
                loader: 'babel-loader',
                exclude: /node_modules/
            },
            {
                test: /\.scss$/,
                exclude: /node_modules/,
                use: configureCssLoader()
            },
            {
                test: /\.woff(2)?(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                use: [{
                    loader: 'url-loader',
                    options: {
                        limit: 8192,
                        mimetype: 'application/font-woff'
                    }
                }]
            },
            {
                test: /\.(ttf|eot|svg)(\?v=[0-9]\.[0-9]\.[0-9])?$/,
                use: [{ loader: 'file-loader' }]
            }
        ]
    },

    plugins: options.plugins.concat([
        // Always expose NODE_ENV to webpack, in order to use `process.env.NODE_ENV`
        // inside your code for any environment checks; UglifyJS will automatically
        // drop any unreachable code.
        new webpack.DefinePlugin({
            'process.env': {
                NODE_ENV: JSON.stringify(process.env.NODE_ENV)
            },
            API_BASE_URL: JSON.stringify(createApiBaseUrl(env && env.test)),
            AUTH_BASE_URL: JSON.stringify(createAuthBaseUrl(env && env.test))
        }),

        new webpack.ContextReplacementPlugin(/\.\/locale$/, (context) => {
            if (!/\\moment\\/.test(context.context)) return;

            // context needs to be modified in place
            Object.assign(context, {
                regExp: /^\.\/(en|nl)/,
                // point to the locale data folder relative to moment's src/lib/locale
                request: '../../locale'
            });
        }),

        new HtmlWebpackPlugin({
            inject: true, // Inject all files that are generated by webpack, e.g. bundle.js
            templateContent: templateContent()
        }),

        new webpack.NamedModulesPlugin()
    ]),

    resolve: {
        modules: ['app', 'node_modules'],
        extensions: [
            '.js',
            '.jsx',
            '.react.js'
        ],
        mainFields: [
            'browser',
            'jsnext:main',
            'main'
        ]
    },

    devtool: options.devtool,
    target: 'web', // Make web variables accessible to webpack, e.g. window
    performance: options.performance || {}
});

function templateContent() {
    return fs
        .readFileSync(path.resolve(process.cwd(), 'app/index.html'))
        .toString();
}
